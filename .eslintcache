[{"/mnt/c/Users/User/my-app-streaming/src/index.js":"1","/mnt/c/Users/User/my-app-streaming/src/App.js":"2","/mnt/c/Users/User/my-app-streaming/src/constants/index.js":"3"},{"size":218,"mtime":1609811168530,"results":"4","hashOfConfig":"5"},{"size":4209,"mtime":1609854533560,"results":"6","hashOfConfig":"5"},{"size":488,"mtime":1610120467216,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1hzioqc",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/User/my-app-streaming/src/index.js",[],["16","17"],"/mnt/c/Users/User/my-app-streaming/src/App.js",["18"],"import React, { useEffect, useState, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport { options, rtc } from \"./constants\";\nimport AgoraRTC from \"agora-rtc-sdk-ng\";\n\nfunction App() {\n  async function handleSubmit(e) {\n    try {\n      if (channelRef.current.value === \"\") {\n        return console.log(\"Felix\");\n      }\n\n      setJoined(true);\n\n      rtc.client = AgoraRTC.createClient({ mode: \"rtc\", codec: \"h264\" });\n        await rtc.client.join(\n        options.appId,\n        channelRef.current.value,\n        options.token,\n        null\n      );\n\n      // Create an audio track from the audio captured by a microphone\n      rtc.localAudioTrack = await AgoraRTC.createMicrophoneAudioTrack();\n      // Create a video track from the video captured by a camera\n      rtc.localVideoTrack = await AgoraRTC.createCameraVideoTrack();\n\n      rtc.localVideoTrack.play(\"local-stream\");\n\n      rtc.client.on(\"user-published\", async (user, mediaType) => {\n        // Subscribe to a remote user\n        await rtc.client.subscribe(user);\n        console.log(\"subscribe success\");\n        // console.log(user);\n\n        if (mediaType === \"video\" || mediaType === \"all\") {\n          // Get `RemoteVideoTrack` in the `user` object.\n          const remoteVideoTrack = user.videoTrack;\n          console.log(remoteVideoTrack);\n\n          // Dynamically create a container in the form of a DIV element for playing the remote video track.\n          const PlayerContainer = React.createElement(\"div\", {\n            id: user.uid,\n            className: \"stream\",\n          });\n          ReactDOM.render(\n            PlayerContainer,\n            document.getElementById(\"remote-stream\")\n          );\n\n          user.videoTrack.play(`${user.uid}`);\n        }\n\n        if (mediaType === \"audio\" || mediaType === \"all\") {\n          // Get `RemoteAudioTrack` in the `user` object.\n          const remoteAudioTrack = user.audioTrack;\n          // Play the audio track. Do not need to pass any DOM element\n          remoteAudioTrack.play();\n        }\n      });\n\n      rtc.client.on(\"user-unpublished\", (user) => {\n        // Get the dynamically created DIV container\n        const playerContainer = document.getElementById(user.uid);\n        console.log(playerContainer);\n        // Destroy the container\n        playerContainer.remove();\n      });\n\n      // Publish the local audio and video tracks to the channel\n      await rtc.client.publish([rtc.localAudioTrack, rtc.localVideoTrack]);\n\n      console.log(\"publish success!\");\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async function handleLeave() {\n    try {\n      const localContainer = document.getElementById(\"local-stream\");\n\n      rtc.localAudioTrack.close();\n      rtc.localVideoTrack.close();\n\n      setJoined(false);\n      localContainer.textContent = \"\";\n\n      // Traverse all remote users\n      rtc.client.remoteUsers.forEach((user) => {\n        // Destroy the dynamically created DIV container\n        const playerContainer = document.getElementById(user.uid);\n        playerContainer && playerContainer.remove();\n      });\n\n      // Leave the channel\n      await rtc.client.leave();\n    } catch (err) {\n      console.error(err);\n    }\n  }\n  const [joined, setJoined] = useState(false);\n  const channelRef = useRef(\"\");\n  const remoteRef = useRef(\"\");\n  const leaveRef = useRef(\"\");\n\n  return (\n    <>\n      <div className=\"container\">\n        <input\n          type=\"text\"\n          ref={channelRef}\n          id=\"channel\"\n          placeholder=\"Enter Channel name\"\n        />\n        <input\n          type=\"submit\"\n          value=\"Join\"\n          onClick={handleSubmit}\n          disabled={joined ? true : false}\n        />\n        <input\n          type=\"button\"\n          ref={leaveRef}\n          value=\"Leave\"\n          onClick={handleLeave}\n          disabled={joined ? false : true}\n        />\n      </div>\n      {joined ? (\n        <>\n          <div id=\"local-stream\" className=\"stream local-stream\"></div>\n          <div\n            id=\"remote-stream\"\n            ref={remoteRef}\n            className=\"stream remote-stream\"\n          ></div>\n        </>\n      ) : null}\n    </>\n  );\n}\n\nexport default App;","/mnt/c/Users/User/my-app-streaming/src/constants/index.js",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":1,"column":17,"nodeType":"25","messageId":"26","endLine":1,"endColumn":26},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]